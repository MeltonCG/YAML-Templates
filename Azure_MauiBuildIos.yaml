
# Name of build, currently set to MAJOR.MINOR.BUNDLEVERSION variables
name: "$(Major).$(Minor).$(BUNDLEVERSION)"

stages:
- stage: Build_iOS
  dependsOn: []
  jobs:
  - job: Build_MAUI_iOS
    displayName: Build iOS
    pool:
      vmImage: 'macos-15'
      demands: xcode

    steps:
    - task: UseDotNet@2
      displayName: 'Install .NET sdk'
      inputs:
        packageType: sdk
        version: 9.0.x
        installationPath: $(Agent.ToolsDirectory)/dotnet
    
    # manually select xcode version currently compatible with MAUI (upgrade as appropriate)
    - task: PowerShell@2
      displayName: Select Xcode Version
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "Mac OS version:"
          sw_vers -productVersion
          Write-Host ""
          Write-Host "Installed Xcode versions:"
          ls /Applications | grep 'Xcode'
          Write-Host ""
          Write-Host "Currently selected Xcode:"
          xcrun xcode-select --print-path
          Write-Host ""
          Write-Host "Selecting latest Xcode..."
          sudo xcode-select -s /Applications/Xcode_16.3.app
          Write-Host "Newly selected Xcode path:"
          xcrun xcode-select --print-path
          Write-Host "Xcode version:"
          xcodebuild -version

    - task: CmdLine@2
      displayName: 'Install Maui Workload'
      inputs:
        script: 'dotnet workload install maui'

    - task: DotNetCoreCLI@2
      inputs:
        command: 'restore'
        projects: '**/*.sln'
        feedsToUse: 'config'
        nugetConfigPath: 'nuget.config'

# Generate a distribution provisioning profile and certificate in the Apple Developer Portal, then download them to Azure DevOps secure files.
    - task: InstallAppleProvisioningProfile@1
      inputs:
        provisioningProfileLocation: 'secureFiles'
        provProfileSecureFile: 'YourDistributionProvisioningprofile.mobileprovision'
        
    - task: InstallAppleCertificate@2
      inputs:
        certSecureFile: 'YourCert.p12'
        keychain: 'temp'
        certPwd: $(p12Password)

# Optional step to manually set the builds version number to match the MAJOR.MINOR.BUNDLEVERSION variables.
    - task: PowerShell@2
      displayName: 'Update Version Number in info.plist'
      inputs:
        targetType: 'inline'
        script: |
          [string] $buildPlist = "$(Build.SourcesDirectory)/YourApp/Platforms/iOS/Info.plist"

          [string] $versionNameValue = "$(Major).$(Minor)"
          [int] $versionCodeValue = "$(BundleVersion)"
          
          Write-Host "Version $versionNameValue"
          Write-Host "BundleVersion $versionCodeValue"      

          /usr/libexec/PlistBuddy -c "Add :CFBundleShortVersionString string $versionNameValue" "$buildPlist"
          /usr/libexec/PlistBuddy -c "Add :CFBundleVersion string $versionCodeValue" "$buildPlist"

    - task: DotNetCoreCLI@2
      displayName: 'Build the iOS Binaries'
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: '**/*.sln'
        arguments: '-f:net9.0-ios -c:Release -r:ios-arm64 /p:ArchiveOnBuild=true /p:EnableAssemblyILStripping=false /p:VersionNumber=$(Major).$(Minor).$(BUNDLEVERSION)'
        zipAfterPublish: false

    - task: CopyFiles@2
      displayName: 'Copy iOS IPA file from Build to Staging'
      inputs:
        SourceFolder: '$(Agent.BuildDirectory)'
        Contents: '**/*.ipa'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
        OverWrite: true
        flattenFolders: true

    - task: PublishBuildArtifacts@1
      displayName: 'Publish the Staging Files.'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'Your App'
        publishLocation: 'Container'

# This will push to TestFlight using the App Store Connect API.
    - task: AppStoreRelease@1
      inputs:
        authType: 'ApiKey'
        apiKeyId: '#######'
        apiKeyIssuerId: '00000000-0000-0000-0000-000000000000'
        apitoken: '$(AppStoreApiToken)'
        releaseTrack: 'TestFlight'
        appIdentifier: 'com.yourcompany.yourapp'
        appType: 'iOS'
        ipaPath: '$(Build.ArtifactStagingDirectory)/YourApp.ipa'
        shouldSkipWaitingForProcessing: true
        distributedToExternalTesters: false
